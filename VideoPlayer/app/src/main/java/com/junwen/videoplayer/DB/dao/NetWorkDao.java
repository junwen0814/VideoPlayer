package com.junwen.videoplayer.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.junwen.videoplayer.DB.entity.NetWorkEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NetWorkInfo.
*/
public class NetWorkDao extends AbstractDao<NetWorkEntity, Long> {

    public static final String TABLENAME = "NetWorkInfo";

    /**
     * Properties of entity NetWorkEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Vid = new Property(0, Long.class, "vid", true, "VID");
        public final static Property VideoName = new Property(1, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property VideoUrl = new Property(2, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property VideoType = new Property(3, String.class, "videoType", false, "VIDEO_TYPE");
        public final static Property Thumbnail = new Property(4, String.class, "thumbnail", false, "THUMBNAIL");
    };


    public NetWorkDao(DaoConfig config) {
        super(config);
    }
    
    public NetWorkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NetWorkInfo' (" + //
                "'VID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: vid
                "'VIDEO_NAME' TEXT," + // 1: videoName
                "'VIDEO_URL' TEXT," + // 2: videoUrl
                "'VIDEO_TYPE' TEXT," + // 3: videoType
                "'THUMBNAIL' TEXT);"); // 4: thumbnail
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NetWorkInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NetWorkEntity entity) {
        stmt.clearBindings();
 
        Long vid = entity.getVid();
        if (vid != null) {
            stmt.bindLong(1, vid);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(2, videoName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(4, videoType);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(5, thumbnail);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NetWorkEntity readEntity(Cursor cursor, int offset) {
        NetWorkEntity entity = new NetWorkEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // vid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // thumbnail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NetWorkEntity entity, int offset) {
        entity.setVid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbnail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NetWorkEntity entity, long rowId) {
        entity.setVid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NetWorkEntity entity) {
        if(entity != null) {
            return entity.getVid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
